---
# Generate SSH Key Pair
- name: Ensure SSH key pair exists
  command: ssh-keygen -t rsa -b 4096 -f ~/.ssh/id_rsa -N ""
  args:
    creates: ~/.ssh/id_rsa

- name: Read SSH public key without encoding
  command: cat /root/.ssh/id_rsa.pub
  register: ssh_public_key
  changed_when: false

- name: Set SSH key fact
  set_fact:
    ssh_key: "{{ ssh_public_key.stdout_lines[0] | trim }}"

# Ensure OpenShift install directory exists
- name: Ensure OpenShift install directory exists
  file:
    path: /root/ocp-install
    state: directory
    mode: '0770'

# Generate OpenShift Install Config using Jinja2 template
- name: Deploy install-config.yaml
  template:
    src: install-config.yaml.j2
    dest: ~/ocp-install/install-config.yaml
    mode: '0644'

# Validate install-config.yaml before proceeding
- name: Validate install-config.yaml before proceeding
  command: cat /root/ocp-install/install-config.yaml
  register: install_config_content
  changed_when: false

- name: Debug install-config.yaml content
  debug:
    var: install_config_content.stdout_lines

# Ensure OpenShift Install Binary is Available
- name: Check if openshift-install is available
  stat:
    path: /usr/local/bin/openshift-install
  register: openshift_binary

# Generate OpenShift Kubernetes manifest files
- name: Generate Kubernetes manifest files
  command: /usr/local/bin/openshift-install create manifests --dir /root/ocp-install
  args:
    chdir: /root/ocp-install

# Generate Ignition config and Kubernetes auth files
- name: Generate Ignition config and Kubernetes auth files
  command: /usr/local/bin/openshift-install create ignition-configs --dir /root/ocp-install
  args:
    chdir: /root/ocp-install

# Ensure Web Server Directory Exists
- name: Create OpenShift web hosting directory
  file:
    path: /var/www/html/ocp4
    state: directory
    mode: '0770'

# Copy Generated Install Files to Web Server Directory
- name: Copy OpenShift install files to web server directory
  copy:
    src: /root/ocp-install/
    dest: /var/www/html/ocp4
    remote_src: yes
    mode: '0770'

- name: Check if CoreOS image exists
  stat:
    path: /opt/openshift/rhcos-4.17.0-x86_64-metal.x86_64.raw.gz
  register: coreos_image

- name: Move CoreOS Image to Web Server Directory
  command: mv /opt/openshift/rhcos-4.17.0-x86_64-metal.x86_64.raw.gz /var/www/html/ocp4/rhcos
  when: coreos_image.stat.exists

- name: Change ownership of OpenShift web files to Apache
  file:
    path: /var/www/html/ocp4/
    owner: apache
    group: apache
    recurse: yes
    mode: '0770'

- name: Set correct permissions for OpenShift web files
  file:
    path: /var/www/html/ocp4/
    mode: '0770'
    recurse: yes

# Validate OpenShift
- name: Validate that OpenShift web server is accessible
  command: curl -I localhost:8080/ocp4/
  register: curl_result
  changed_when: false

- name: Debug Web Hosting Validation
  debug:
    msg: "Apache Web Server Response: {{ curl_result.stdout_lines }}"

# --- Force the complete configuration to reset any potential issues ---
- name: Force complete DNS configuration with internal and external DNS
  command: >
    nmcli con modify {{ ansible_default_ipv4.interface }}
    ipv4.dns "127.0.0.1,{{ openshift_admin.ansible_resolver_ips }}"
    ipv4.ignore-auto-dns yes
  become: yes
  when: openshift_admin.ansible_resolver_ips is defined and openshift_admin.ansible_resolver_ips != ""

- name: Reload network connection to enforce DNS settings
  command: nmcli con up {{ ansible_default_ipv4.interface }}
  become: yes
